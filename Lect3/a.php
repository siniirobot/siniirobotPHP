<?php

// http://php.net/manual/ru/language.operators.precedence.php

// Операторы имеют приоритет
2 + 2 * 2; // 2 + (2 * 2)

// При равном приоритете выполняться будет либо справа налево, либо слева направо зависит от типа оператора
1 -2 - 3; // (1 - 2) - 3 (потому что "-"" лево-ассоциативный оператор)
$a = $b = $c; // $a = ($b = $c) (потому что "=" право-ассоциативный оператор)

//Неассоциативные операторы с одинаковым приоритетом не могут использоваться совместно
1 < 2 > 1; // не работает
1 <= 1 == 1; // работает (== имеет более низкий приоритет чем <=)

// Несмотря на то, что = имеет более низкий приоритет, чем большинство других операторов, PHP все же позволяет делать так
//  D этом примере результат выполнения foo() будет присвоен $a
if (!$a = foo())
	echo '1';

// Ассоциативность
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// ассоциативность тернарного оператора отличается от C/C++
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5

// Неопределенный порядок вычисления
$a = 1;
echo $a + $a++; // может вывести как 2 так и 3

$i = 1;
$array[$i] = $i++; // может установить индекс как 1, так 2

// +, - и . имеют одинаковый приоритет
$x = 4;
// следующий код может выдать неожиданный результат:
echo "x минус 1 равно " . $x-1 . ", ну я надеюсь\n";
// поскольку он вычисляется таким образом:
echo (("x минус один равно " . $x) - 1) . ", ну я надеюсь\n";
// требуемый приоритет следует задать скобками:
echo "x минус 1 равно " . ($x-1) . ", ну я надеюсь\n";

// Операторы сравнения http://php.net/manual/ru/language.operators.comparison.php

// Операторы инкремента и декремента

// Логические операторы

// Строковые операторы

// Побитовые операторы http://php.net/manual/ru/language.operators.bitwise.php

// Комбинированные операторы
$a = 3;
$a += 5; // устанавливает $a в 8, как если бы мы написали: $a = $a + 5;
$b = "Привет";
$b .= "-привет!"; // устанавливает $b в "Привет-привет!",  как и $b = $b . "There!";

// Присваивание по ссылке
$a = 3;
$b = &$a; // $b - это ссылка на $a
print "$a\n"; // печатает 3
print "$b\n"; // печатает 3
$a = 4; // меняем $a
print "$a\n"; // печатает 4
print "$b\n"; // также печатает 4, так как $b является ссылкой на $a, а значение переменной $a успело измениться

// Тернарные операторы
// На первый взгляд, следующий код должен вывести 'true', однако, он выводит 't'
echo (true?'true':false?'t':'f');

// Присваивание значения по умолчанию
$action = $_POST['action'] ?? 'default';

$foo = null;
$bar = null;
$baz = 1;
$qux = 2;
echo $foo ?? $bar ?? $baz ?? $qux; // выведет 1

// @ оператор управления ошибками

// Операторы исполнения
$output = `ls -al`;
echo "<pre>$output</pre>";

// Операторы, работающие с массивами http://php.net/manual/ru/language.operators.array.php
// Объединение массивов
$a = array("a" => "apple", "b" => "banana");
$b = array("a" => "pear", "b" => "strawberry", "c" => "cherry");

$c = $a + $b; // Объединение $a и $b
echo "Объединение \$a и \$b: \n";
var_dump($c);

$c = $b + $a; // Объединение $b и $a
echo "Объединение \$b и \$a: \n";
var_dump($c);

$a += $b; // Объединение $a += $b, это $a и $b
echo "Объединение \$a += \$b: \n";
var_dump($a);

$a = array("apple", "banana");
$b = array(1 => "banana", "0" => "apple");

// Сравнение массивов
var_dump($a == $b); // bool(true)
var_dump($a === $b); // bool(false)

// Оператор проверки типа
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);

// Странные операторы https://habr.com/post/412603/
